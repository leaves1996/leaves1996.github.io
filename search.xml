<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java基础之集合总结]]></title>
    <url>%2F2019%2F08%2F07%2FJava%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[集合&emsp;&emsp;在Java编程语言中的容器主要是Array（数组）和collection（集合），下面我们就来看看Java中的容器： 集合和数组 数组（可以存储基本数据类型和引用数据类型）是用来存储对象的一种容器，但是数组的长度固定不变的，不适合在对象数量未知的情况下使用。 集合（只能引用数据类型对象，对象类型可以不一样）的长度可变，可在多数情况下使用。 注意：虽然集合不能存储基本数据类型，但是可以存储基本数据类型的包装类类型。 集合框架层次关系&emsp;&emsp;这里小编就不介绍数组了，本文主要讲解集合的知识点总结。如下图所示：在图中，实线边框的是实现类，折线边框的是抽象类，点线边框的是接口。 说明： Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是有两个子接口，就是Set和List。Set集合中不能包含重复的元素。List集合是一个有序的集合，可重复元素，提供了按索引访问元素的方式。 Map是Java.util包中的另一个接口，注意，它和我们前面说的Collection接口没有任何关系，是互相独立的，也是Java集合中的一部分。 Map集合是以键值对的形式存储数据的，Map集合不能包含重复的key，一个key映射一个value。但是可以包含相同的value。 Iterator 迭代器，Java中的所有的集合类都实现了该接口，这是一个用于遍历集合的接口，该接口中主要包含三个方法，源码如下： 123456789101112public interface Iterator&lt;E&gt; &#123; //是否还有下一个元素 boolean hasNext(); //返回下一个元素 E next(); //删除当前元素 default void remove() &#123; throw new UnsupportedOperationException("remove"); &#125;&#125; 集合家族的体系介绍 1、集合分类 单列集合：每个元素都是一个独立的个体，存储的都是单身狗。 双列集合：每个元素都是针对一对数据进行的，一对数据才是一个存储单元，存储的都是一对一对的小情侣。 2、单列集合的体系结构： Collection —-&gt; 单列集合顶层接口 List —-&gt; 有序的子接口 ArrayList —-&gt; 顺序存储，查改快，增删慢 LinkedList —-&gt; 链式存储，增删快，查改慢 vector —-&gt; 顺序存储，各种操作慢 Set —-&gt; 无序且元素唯一子接口 HashSet —-&gt; 哈希存储 LinkedHashSet —-&gt; 是HashSet的子类, 哈希加链表的方式存储 3、双列集合的体系 Map —-&gt; 双列集合的顶层接口 HashMap —-&gt; 哈希表存储 LinkedHashMap —-&gt; 是HashMap的子类, 哈希加链表的方式存储 整体总结1、Java集合框架是什么？说出一些集合框架的优点？&emsp;&emsp;每种编程语言中都有集合，最初的Java版本包含几种集合类：Vector、Stack、HashTable和Array。随着集合的广泛使用，Java1.2提出了囊括所有集合接口、实现和算法的集合框架。在保证线程安全的情况下使用泛型和并发集合类，Java已经经历了很久。它还包括在Java并发包中，阻塞接口以及它们的实现。集合框架的部分优点如下： （1）使用核心集合类降低开发成本，而非实现我们自己的集合类。 （2）随着使用经过严格测试的集合框架类，代码质量会得到提高。 （3）通过使用JDK附带的集合类，可以降低代码维护成本。 （4）复用性和可操作性。 2、集合框架中的泛型有什么优点？&emsp;&emsp;Java1.5引入了泛型，所有的集合接口和实现都大量地使用它。泛型允许我们为集合提供一个可以容纳的对象类型，因此，如果你添加其它类型的任何元素，它会在编译时报错。这避免了在运行时出现ClassCastException，因为你将会在编译时得到报错信息。泛型也使得代码整洁，我们不需要使用显式转换和instanceOf操作符。它也给运行时带来好处，因为不会产生类型检查的字节码指令。 3、Java集合框架的基础接口有哪些？&emsp;&emsp;Collection为集合层级的根接口。一个集合代表一组对象，这些对象即为它的元素。Java平台不提供这个接口任何直接的实现。 &emsp;&emsp;Set是一个不能包含重复元素的集合。这个接口对数学集合抽象进行建模，被用来代表集合，就如一副牌。 &emsp;&emsp;List是一个有序集合，可以包含重复元素。你可以通过它的索引来访问任何元素。List更像长度动态变换的数组。 &emsp;&emsp;Map是一个将key映射到value的对象.一个Map不能包含重复的key：每个key最多只能映射一个value。 一些其它的接口有Queue、Dequeue、SortedSet、SortedMap和ListIterator。 4、为何Collection不从Cloneable和Serializable接口继承？&emsp;&emsp;Collection接口指定一组对象，对象即为它的元素。如何维护这些元素由Collection的具体实现决定。例如，一些如List的Collection实现允许重复的元素，而其它的如Set就不允许。很多Collection实现有一个公有的clone方法。然而，把它放到集合的所有实现中也是没有意义的。这是因为Collection是一个抽象表现。重要的是实现。 &emsp;&emsp;当与具体实现打交道的时候，克隆或序列化的语义和含义才发挥作用。所以，具体实现应该决定如何对它进行克隆或序列化，或它是否可以被克隆或序列化。 &emsp;&emsp;在所有的实现中授权克隆和序列化，最终导致更少的灵活性和更多的限制。特定的实现应该决定它是否可以被克隆和序列化。 5、为何Map接口不继承Collection接口？&emsp;&emsp;尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。 &emsp;&emsp;如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。 6、Iterator是什么？&emsp;&emsp;Iterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>集合</tag>
        <tag>Java基础</tag>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java异常分析]]></title>
    <url>%2F2019%2F08%2F07%2FJava%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp; 相信各位朋友对异常并不陌生，对它我们真的又喜又悲，成功的解决一个BUG那真是欢天喜地，但是又怕遇见它，今天小编就给大家笼统的介绍一下我们的每天相处的好朋友–异常。 Java 异常类结构体系图既然想要了解异常，那么我们首先要了解一下，异常的结构体系： Java异常分析&emsp;Throwable&emsp;&emsp; Throwable 类是 Java 语言中所有错误或异常的超类。只有当对象是此类（或其子类之一）的实例时，才能通过 Java 虚拟机或者 Java throw 语句抛出。&emsp;&emsp;Thowable 类有两个子类的实例，Error 和 Exception，通常用于指示发生了异常情况。通常，这些实例是在异常情况的上下文中新近创建的，因此包含了相关的信息（比如堆栈跟踪数据）。 &emsp; Throwable 的两个子类 Error 和 ExceptionError&emsp;&emsp;Error 是 Throwable 的子类，用于指示合理的应用程序不应该试图捕获的严重问题。大多数这样的错误都是异常条件。虽然 ThreadDeath 错误是一个“正规”的条件，但它也是 Error 的子类，因为大多数应用程序都不应该试图捕获它。Exception&emsp;&emsp;Exception 类及其子类是 Throwable 的一种形式，它指出了合理的应用程序想要捕获的条件。Exception 类分为两大类：RuntimeException （运行异常类） 和 Non_RuntimeException （非运行异常类）： RuntimeException &emsp;运行时异常都是RuntimeException类及其子类异常，如NullPointerException、IndexOutOfBoundsException等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。 &emsp;当出现RuntimeException的时候，我们可以不处理。当出现这样的异常时，总是由虚拟机接管。比如：我们从来没有人去处理过NullPointerException异常，它就是运行时异常，并且这种异常还是最常见的异常之一。 &emsp;出现运行时异常后，如果没有捕获处理这个异常（即没有catch），系统会把异常一直往上层抛，一直到最上层，如果是多线程就由Thread.run()抛出，如果是单线程就被main()抛出。抛出之后，如果是线程，这个线程也就退出了。如果是主程序抛出的异常，那么这整个程序也就退出了。运行时异常是Exception的子类，也有一般异常的特点，是可以被catch块处理的。只不过往往我们不对他处理罢了。也就是说，你如果不对运行时异常进行处理，那么出现运行时异常之后，要么是线程中止，要么是主程序终止。 &emsp;如果不想终止，则必须捕获所有的运行时异常，决不让这个处理线程退出。队列里面出现异常数据了，正常的处理应该是把异常数据舍弃，然后记录日志。不应该由于异常数据而影响下面对正常数据的处理。 非运行异常 &emsp;非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。如IOException、SQLException等以及用户自定义的Exception异常。对于这种异常，JAVA编译器强制要求我们必需对出现的这些异常进行catch并处理，否则程序就不能编译通过。所以，面对这种异常不管我们是否愿意，只能自己去写一大堆catch块去处理可能的异常。 常见运行时异常 算术异常类：ArithmeticExecption 空指针异常类：NullPointerException 类型强制转换异常：ClassCastException 数组负下标异常：NegativeArrayException 数组下标越界异常：ArrayIndexOutOfBoundsException 违背安全原则异常：SecurityException 字符串转换为数字异常：NumberFormatException 尝试访问null对象成员：NullPointerException 欲得到的数据类型与实际输入的类型不匹配：InputMismatchException 方法接收到非法参数：IllegalArgumentException 常见的编译时异常 不能加载所需的类(常见于多态中向下转型)：ClassNotFoundException 文件未找到异常：FileNotFoundException 提供关于数据库访问错误或其他错误信息的异常：SQLException 当发生某种 I/O 异常时，抛出此异常：IOException 当数据格式发生错误时，抛出此异常：DataFormatException 表示解析时出现意外错误抛出此异常：ParseException 异常的捕获和处理Java异常的捕获和处理是一个不容易把握的事情，如果处理不当，不但会让程序代码的可读性大大降低，而且导致系统性能低下，甚至引发一些难以发现的错。 Java异常处理涉及到五个关键字，分别是：try、catch、finally、throw、throws。下面将骤一介绍，通过认识这五个关键字，掌握基本异常处理知识。 try：它里面放置可能引发异常的代码 catch：后面对应异常类型和一个代码块，用于表明该catch块用于处理这种类型的代码块，可以有多个catch块。 finally：主要用于回收在try块里打开的物力资源（如数据库连接、网络连接和磁盘文件），异常机制总是保证finally块总是被执行。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。 finally 关键字： 1234567public Integer test1() &#123; try &#123; return 1; &#125; finally &#123; return 2; &#125;&#125; 上面的示例：返回的结果为： 2 123456789public Integer test() &#123; try &#123; System.out.println("try&gt;&gt;&gt;&gt;&gt;&gt;&gt;"); return 1; &#125;finally &#123; System.out.println("finally&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"); return 2; &#125;&#125; 上面的示例，返回的结果为： throw：用于抛出一个实际的异常，可以单独作为语句使用，抛出一个具体的异常对象。 throws：用在方法签名中，用于声明该方法可能抛出的异常。 throw与throws关键字的区别（1）throw关键字是用于方法体内部，用来抛出一个Throwable类型的异常。如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该 方法的调用者也必须检查处理抛出的异常。如果所有方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息。如果抛出 的是Error或RuntimeException，则该方法的调用者可选择处理该异常。 （2）throws关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常。仅当抛出了检查异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣一般在catch块中打印一下堆栈信息做个勉强处理。 1234public void test(int i) throws IllegalArgumentException&#123; if (i&lt;0) throw new IllegalArgumentException("参数异常");&#125; 说明：throws IllegalArgumentException 表示：此方法可能抛出 IllegalArgumentException 异常，至于抛不抛还要看方法中是否会捕捉到 IllegalArgumentException 异常。throw new IllegalArgumentException(“参数异常”); 表示 if 语句判断，是否会捕捉到 IllegalArgumentException 异常。 总结如下： throws语句用在方法声明后面，用来声明方法可能会抛出某些异常，由该方法的调用者来处理；throw语句用在方法体内，用来抛出一个Throwable类型的异常，由方法体内的语句处理。 throws主要是声明这个方法会抛出这种类型的异常，使它的调用者知道要捕获这个异常；throw是具体向外抛异常的动作，所以它是抛出一个异常实例。 throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。 附加：有return的情况下try catch finally的执行顺序 结论： 不管有木有出现异常，finally块中代码都会执行； 当try和catch中有return时，finally仍然会执行； finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的； finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。 举例： 情况1：try{} catch(){}finally{} return;显然程序按顺序执行。 123456789101112public int test()&#123; int i = 1; try &#123; i++; &#125; catch (Exception e) &#123; e.printStackTrace(); ++i; &#125;finally &#123; System.out.println(i); // i = 2 &#125; return i; // i = 2 &#125; 情况2:try{ return; }catch(){} finally{} return; 程序执行try块中return之前（包括return语句中的表达式运算）代码； 再执行finally块，最后执行try中return; finally块之后的语句return，因为程序在try中已经return所以不再执行。 1234567891011121314public int test()&#123; int i = 1; try &#123; i++; return i; // i = 2 &#125; catch (Exception e) &#123; e.printStackTrace(); ++i; &#125;finally &#123; i +=3; System.out.println(i); // i = 5 &#125; return i; // 该语句未执行&#125; 情况3:try{ } catch(){return;} finally{} return; 程序先执行try，如果遇到异常执行catch块， 有异常：则执行catch中return之前（包括return语句中的表达式运算）代码，再执行finally语句中全部代码， 最后执行catch块中return. finally之后也就是4处的代码不再执行。 无异常：执行完try再finally再return. 1234567891011121314151617/** * 有异常 * @return */public int test()&#123; int i = 1; try &#123; int j = i/0; &#125; catch (Exception e) &#123; e.printStackTrace(); return i; // i = 1 &#125;finally &#123; i +=3; System.out.println(i); // i = 4 &#125; return i; // 该语句未执行&#125; 无异常的情况和情况1 的执行顺序一样。 情况4:try{ return; }catch(){} finally{return;} 程序执行try块中return之前（包括return语句中的表达式运算）代码； 再执行finally块，因为finally块中有return所以提前退出。 12345678910111213public int test()&#123; int i = 1; try &#123; i++; return i; //该语句未执行 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally &#123; i +=3; System.out.println(i); // i = 5 return i; // i = 5 &#125;&#125; 情况5:try{} catch(){return;}finally{return;} 程序执行catch块中return之前（包括return语句中的表达式运算）代码； 再执行finally块，因为finally块中有return所以提前退出。 12345678910111213public int test()&#123; int i = 1; try &#123; i++; &#125; catch (Exception e) &#123; e.printStackTrace(); return i; // 不管有没有异常该语句都不执行 &#125;finally &#123; i +=3; System.out.println(i); // i = 5 return i; // i = 5 &#125;&#125; 情况6:try{ return;}catch(){return;} finally{return;} 程序执行try块中return之前（包括return语句中的表达式运算）代码； 有异常：执行catch块中return之前（包括return语句中的表达式运算）代码； 则再执行finally块，因为finally块中有return所以提前退出。 无异常：则再执行finally块，因为finally块中有return所以提前退出。 123456789101112131415public int test()&#123; int i = 1; try &#123; i++; int j = i/0; return i; // 不管有没有异常该语句都不执行 &#125; catch (Exception e) &#123; e.printStackTrace(); //有异常的情况执行 return i; // 不管有没有异常该语句都不执行 &#125;finally &#123; i +=3; System.out.println(i); // i = 5 return i; // i = 5 &#125;&#125; 总结：任何执行try 或者catch中的return语句之前，都会先执行finally语句，如果finally存在的话。如果finally中有return语句，那么程序就return了，所以finally中的return是一定会被return的 final, finally, finalize的区别finally 是异常处理语句结构的一部分，表示总是执行.finalize 是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等. JVM不保证此方法总被调用. final：修饰符（关键字）&emsp;&emsp;如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。 &emsp;&emsp;将变量或方法声明为final，可以保证它们在使用中不被改变。 &emsp;&emsp;被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重载 finally&emsp;&emsp;再异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会执行，然后控制就会进入 finally 块（如果有的话）。 finalize：方法名。&emsp;&emsp;Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。 &emsp;&emsp;它是在 Object 类中定义的，因此所有的类都继承了它。子类覆盖finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>JavaSE</tag>
        <tag>Exception</tag>
        <tag>异常</tag>
      </tags>
  </entry>
</search>
